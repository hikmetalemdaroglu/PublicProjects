<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        XwAAKfMLACA1X/ywBQAgY34BAKTMLwCAlPkFAJCaL3/YAgCQmS9/3AIAkDG/AABS89WPGwAAMuYXAEDK
        /AIASM3XP20AAMiYXwAAKfMLACBlfgEApOab6xsAADLmFwBAyvwCAEjNt3tbAAAy5hcAQMr8AgBImV8A
        AKn57sYWAICM+QUAkJrvb2wBAMjM94stAACZ+WGxBQAgY34BAKTmx+UOAICM+QUAkJqfljsAADLmFwBA
        aq6vdgAAZMwvAICU+QUAkJq99T4AABnzCwAgZX4BAKTmxuYAAICM+QUAkDK/AABS5hcAQGoW20MAADLm
        FwBAyvwCAEiZXwAAKfMLACBlfgEApGa5PQAAIGN+AQCkzC8AgJT5BQCQMr8AAFLmFwBAyvwCAEiZXwAA
        qVntDgAAyJhfAACpo/l1CABAxvwCAEiZXwAAqVnvHwIAkDG/AABS5hcAQMr8AgBIzWb/EACAjPkFAJAy
        vwAAUrPdPwQAIGN+AQCkzC8AgJT5BQCQmt3+IQAAGfMLACBlfgEApMwvAICU+QUAkDK/AABSs39wCABA
        xvwCAEiZXwAAKfMLACBlfgEApMwvAICU+QUAkDK/AABSc3BwCABAxvwCAEiZXwAAqTk4PAQAIGN+AQCk
        5lCSJElh5pckSVKa+SVJkpRmfkmSJKWZX5IkSWnmlyRJUpr5JUmSlGZ+SZIkpZlfkiRJaeaXJElSmvkl
        SZKUZn5JkiSlmV+SJElp5pckSVKa+SVJkpR2NL8OAADImF8AACnzCwAgZX4BAKTMLwCA1NH82gcAIGN+
        AQCkzC8AgJT5BQCQMr8AAFJH8+t/3/gAAPz/mF8AACnzCwAgZX4BAKTMLwCA1NH8kiRJUpf5JUmSlGZ+
        SZIkpZlfkiRJaeaXJElSmvklSZKUZn5JkiSlmV+SJElp5pckSVKa+SVJkpRmfkmSJKWZX5IkSWnmlyRJ
        Upr5JUmSlGZ+SZIkpZlfkiRJaeaXJElSmvklSZKUZn5JkiSlmV+SJElp5pckSVKa+SVJkpRmfkmSJKWZ
        X5IkSWnmlyRJUpr5JUmSlGZ+SZIkpZlfkiRJaeaXJElSmvklSZKUZn5JkiSlmV+SJElp5pckSVKa+SVJ
        kpRmfkmSJKWZX5IkSWnmlyRJUpr5JUmSFHZ4+F/Rs9pY+ZrOmQAAAABJRU5ErkJggg==
</value>
  </data>
</root>